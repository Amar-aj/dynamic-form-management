@page "/scheme-display"

@rendermode InteractiveServer
@using BlazorAppDynamicFormGeneration.Components.Shared
@using BlazorAppDynamicFormGeneration.Models
@using BlazorAppDynamicFormGeneration.Services
@inject IJSRuntime JsRuntime
@inject IDynamicSchemeFormService _service;
@inject ISchemeService MasterSchemeService;
<h3>Dynamic Scheme Form</h3>

@implements IDisposable

<div class="form-group">
    <div class="row">
        <div class="col-md-12">
            <label>Scheme</label>
            <select class="form-control" @onchange="OnChangeScheme">
                <option value="0">Select a scheme</option>
                @foreach (var scheme in allSchemes)
                {
                    <option value="@scheme.Id">@scheme.Name</option>
                }
            </select>
        </div>
    </div>
</div>
@if (allDynamicSchemes.Any())
{
    <form>
        @foreach (var item in allDynamicSchemes.OrderBy(x => x.PositionOnTab))
        {
            <DynamicSchemeFormInputComponent DynamicFormData="item" />
        }

        <input type="submit" value="Save" />
    </form>
   
}


@code {
    int SchemeId = 0;
    private List<DynamicSchemeForm> allDynamicSchemes = new List<DynamicSchemeForm>();
    private List<DynamicSchemeForm> allDynamicSchemesFromChild = new List<DynamicSchemeForm>();
    private List<SchemeMaster> allSchemes = new List<SchemeMaster>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    public async Task GetDataFromChild(List<DynamicSchemeForm> dynamicSchemeForms)
    {
        allDynamicSchemesFromChild = new List<DynamicSchemeForm>();
        allDynamicSchemesFromChild = dynamicSchemeForms;

        foreach (var item in allDynamicSchemesFromChild)
        {
            await _service.InsertAsync(item);
        }

    }
    private async Task HandleValidSubmit()
    {
        // if (model.Id == 0)
        // {
        //     await _service.InsertAsync(model);
        // }
        // else
        // {
        //     await _service.UpdateAsync(model);
        // }

        await LoadData();
        // model = new DynamicSchemeForm();
    }

    private async Task LoadData()
    {
        // allDynamicSchemes = (await _service.GetAllAsync()).ToList();
        allSchemes = (await MasterSchemeService.GetAllAsync()).ToList();
    }

    async Task EditScheme(int id)
    {
        // model = await _service.GetByIdAsync(id);
    }
    async Task OnChangeScheme(ChangeEventArgs e)
    {
        SchemeId = int.Parse(e.Value.ToString());
        Console.WriteLine("It is definitely: " + SchemeId);
        allDynamicSchemes = (await _service.GetSchemeWiseFormAsync(SchemeId)).ToList();

        // model = await _service.GetByIdAsync(id);
    }

    private async Task DeleteScheme(int id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            await _service.DeleteAsync(id);
            await LoadData();
        }

    }

    public void Dispose()
    {
        // Dispose resources if needed
    }
}
